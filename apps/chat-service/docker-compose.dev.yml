version: "3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
  kafka:
    image: confluentinc/cp-kafka:7.3.1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9997:9997
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - zookeeper
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
  db:
    image: mongo
    ports:
      - ${DB_PORT}:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
      MONGO_INITDB_DATABASE: ${DB_NAME}
      MONGO_REPLICA_SET_NAME: rs0
    restart: always
    entrypoint:
      - /bin/bash
      - -c
      - openssl rand -base64 741 > /data/cert.crt; chmod 400 /data/cert.crt &&
        chown 999 /data/cert.crt; /usr/local/bin/docker-entrypoint.sh mongod
        --bind_ip_all --keyFile /data/cert.crt --replSet rs0
    healthcheck:
      test: "test $$(mongosh --quiet -u  $${MONGO_INITDB_ROOT_USERNAME} -p
        $${MONGO_INITDB_ROOT_PASSWORD} --eval \"try { rs.initiate({ _id:
        '\"rs0\"',members: [{ _id: 0, host: '\"localhost\"' }] }).ok } catch (_)
        { rs.status().ok}\") -eq 1"
      start_period: 5s
      interval: 10s
      timeout: 10s
    volumes:
      - mongo:/var/lib/mongosql/data
  mqtt-broker:
    image: emqx:5.4.0
    ports:
      - ${MQTT_PORT}:1883
      - ${MQTT_WS_PORT}:8083
      - ${MQTT_WEB_UI_PORT}:18083
    healthcheck:
      test:
        - CMD
        - /opt/emqx/bin/emqx
        - ctl
        - status
      interval: 5s
      timeout: 25s
      retries: 5
  redis:
    container_name: ${REDIS_HOST}
    image: redis:7
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - redis:/data
  redis_broker:
    container_name: ${REDIS_BROKER_HOST}
    image: redis:7
    ports:
      - ${REDIS_BROKER_PORT}:6379
    volumes:
      - redis_broker:/redis-broker-data
volumes:
  mongo: ~
  redis:
    driver: local
  redis_broker:
    driver: local
